getwd()
renv::init()
renv::status()
renv::snapshot()
library(crew.cluster)
controller<-crew_controller_slurm(
name = NULL,
workers = 1L
)
controller<-crew_controller_slurm(
name = "penguins",
workers = 1L
)
controller$start()
controller$push(compute(1))
controller$pop()
samples=100
results <- controller$map(
command = compute(),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
controller$terminate()
library(crew.cluster)
controller<-crew_controller_slurm(
name = "penguins",
workers = 1L
)
controller$start()
samples=100
results <- controller$map(
command = compute(),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
# example courtesy of Andrie de Vries (andrie@posit.co)
compute <- function(n) {
library(palmerpenguins)
library(dplyr)
peng <- penguins %>%
mutate(
species = as.factor(species),
sex = as.factor(sex)
) %>%
sample_n(100)
glm(body_mass_g ~ species + sex, data = peng)
}
library(crew.cluster)
controller<-crew_controller_slurm(
name = "penguins",
workers = 1L
)
controller$start()
samples=100
results <- controller$map(
command = compute(),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
controller$pop()
compute(1)
?Controllc
results <- controller$map(
compute(),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
controller$pop()
# create new data
new_dat <- tibble::tribble(
~species, ~sex,
"Chinstrap", "male"
)
results <- controller$map(
as.character(compute()),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
results <- controller$map(
command=as.character(compute()),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
results <- controller$map(
command=as.character(compute(1)),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
results <- controller$map(
command=as.character(Sys.info()["nodename"]),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
controller$pop()
controller$pop()
task <- controller$pop()
results <- controller$map(
command=as.character(Sys.info()["nodename"]),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
task <- controller$pop()
controller<-crew_controller_slurm(
name = "penguins",
workers = 1L
)
controller$start()
samples=100
results <- controller$map(
command=as.character(Sys.info()["nodename"]),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
task <- controller$pop()
controller$pop()
controller <- crew_controller_slurm(
name = "my_workflow",
workers = 1L,
seconds_idle = 300,
script_lines = paste0("module load R/", getRversion()),
verbose = TRUE
)
on.exit(controller$terminate())
controller$start()
controller$push( # Should see a job submission message.
name = "do work",
command = as.character(Sys.info()["nodename"])
)
controller$wait()
task <- controller$pop()
expect_false(task$result[[1L]] == as.character(Sys.info()["nodename"]))
results <- controller$map(
command=as.character(Sys.info()["nodename"]),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
controller$push()
controller$pop()
?controller$map()
results <- controller$map(
command=compute(),
data=list(compute=compute)
iterate = list(
results <- controller$map(
command=compute(),
data=list(compute=compute),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
task <- controller$pop()
controller<-crew_controller_slurm(
name = "penguins",
workers = 1L
)
controller$start()
samples=100
results <- controller$map(
command=compute(),
data=list(compute=compute),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
results <- controller$map(
command=compute(),
data=list(compute=compute),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
task <- controller$pop()
?crew_controller_slurm
controller<-crew_controller_slurm(
name = "penguins",
workers = 1L,
slurm_log_output="out",
slurm_error_output="error"
)
controller<-crew_controller_slurm(
name = "penguins",
workers = 1L,
slurm_log_output="out",
slurm_log_error="error"
)
controller$start()
samples=100
results <- controller$map(
command=compute(),
data=list(compute=compute),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
task <- controller$pop()
# example courtesy of Andrie de Vries (andrie@posit.co)
compute <- function(n) {
library(palmerpenguins)
library(dplyr)
peng <- penguins %>%
mutate(
species = as.factor(species),
sex = as.factor(sex)
) %>%
sample_n(100)
glm(body_mass_g ~ species + sex, data = peng)
}
library(crew.cluster)
controller<-crew_controller_slurm(
name = "penguins",
workers = 1L,
slurm_log_output="out",
slurm_log_error="error"
)
controller$start()
samples=100
results <- controller$map(
command=compute(),
data=list(compute=compute),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
o
task <- controller$pop()
# example courtesy of Andrie de Vries (andrie@posit.co)
compute <- function(n) {
library(palmerpenguins)
library(dplyr)
peng <- penguins %>%
mutate(
species = as.factor(species),
sex = as.factor(sex)
) %>%
sample_n(100)
glm(body_mass_g ~ species + sex, data = peng)
}
library(crew.cluster)
controller<-crew_controller_slurm(
name = "penguins",
workers = 1L,
slurm_log_output="out",
slurm_log_error="error"
)
controller$start()
samples=1
results <- controller$map(
command=compute(),
data=list(compute=compute),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
samples=100
results <- controller$map(
command=compute(),
data=list(compute=compute),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
task <- controller$pop()
res <- controller$map(
command=compute(),
data=list(compute=compute),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
# create new data
new_dat <- tibble::tribble(
~species, ~sex,
"Chinstrap", "male"
)
new_dat
# create prediction for each of the models
library(purrr)
library(tibble)
preds <- tibble(mass = map_dbl(res, predict, new_dat))
res
as.list(res)
preds <- tibble(mass = map_dbl(res, predict, new_dat))
typeof(res)
res
preds <- tibble(mass = map_dbl(res$result, predict, new_dat))
# plot the result
library(ggplot2)
ggplot(preds, aes(x = mass)) +
geom_histogram(bins=samples/50) +
ggtitle("Ensemble model prediction of mass of male Chinstrap penguins")
samples=1000
res <- controller$map(
command=compute(),
data=list(compute=compute),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
task <- controller$pop()
controller$pop()
# create new data
new_dat <- tibble::tribble(
~species, ~sex,
"Chinstrap", "male"
)
new_dat
# create prediction for each of the models
library(purrr)
library(tibble)
preds <- tibble(mass = map_dbl(res$result, predict, new_dat))
# plot the result
library(ggplot2)
ggplot(preds, aes(x = mass)) +
geom_histogram(bins=samples/50) +
ggtitle("Ensemble model prediction of mass of male Chinstrap penguins")
?crew_controller_slurm
controller<-crew_controller_slurm(
name = "penguins",
workers = 1L,
seconds_idle = 10,
slurm_log_output="out",
slurm_log_error="error"
)
controller$start()
samples=1000
res <- controller$map(
command=compute(),
data=list(compute=compute),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
controller$terminate()
controller<-crew_controller_slurm(
name = "penguins",
workers = 1L,
seconds_idle = 10,
slurm_log_output="out",
slurm_log_error="error"
)
controller$start()
samples=1000
res <- controller$map(
command=compute(),
data=list(compute=compute),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
# create new data
new_dat <- tibble::tribble(
~species, ~sex,
"Chinstrap", "male"
)
new_dat
# create prediction for each of the models
library(purrr)
library(tibble)
preds <- tibble(mass = map_dbl(res$result, predict, new_dat))
# plot the result
library(ggplot2)
ggplot(preds, aes(x = mass)) +
geom_histogram(bins=samples/50) +
ggtitle("Ensemble model prediction of mass of male Chinstrap penguins")
res <- controller$map(
command=compute(),
data=list(compute=compute),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
controller$terminate()
res <- controller$map(
command=compute(),
data=list(compute=compute),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
controller$terminate()
?crew_controller_slurm
controller<-crew_controller_slurm(
name = "penguins",
workers = 10L,
seconds_idle = 10,
slurm_log_output="out",
slurm_log_error="error",
slurm_memory_gigabytes_per_cpu=1
)
controller$start()
samples=1000
res <- controller$map(
command=compute(),
data=list(compute=compute),
iterate = list(
a = seq(samples)
),
verbose=FALSE
)
controller$terminate()
cl
cl
controller<-crew_controller_slurm(
name = "penguins",
workers = 10L,
seconds_idle = 10,
#  slurm_log_output="out",
#  slurm_log_error="error",
slurm_memory_gigabytes_per_cpu=1
)
# example courtesy of Andrie de Vries (andrie@posit.co)
compute <- function(n) {
peng <- penguins %>%
mutate(
species = as.factor(species),
sex = as.factor(sex)
) %>%
sample_n(100)
glm(body_mass_g ~ species + sex, data = peng)
}
samples=1000
library(crew.cluster)
library(dplyr)
library(palmerpenguins)
controller<-crew_controller_slurm(
name = "penguins",
workers = 10L,
seconds_idle = 10,
#  slurm_log_output="out",
#  slurm_log_error="error",
slurm_memory_gigabytes_per_cpu=1
)
controller$start()
# run a big-ish compute job
res <- controller$map(
command=compute(),
data=list(compute=compute),
iterate = list(
n = seq(samples)
),
packages=c("palmerpenguins","dplyr")
verbose=FALSE
# run a big-ish compute job
res <- controller$map(
command=compute(),
data=list(compute=compute),
iterate = list(
n = seq(samples)
),
packages=c("palmerpenguins","dplyr"),
verbose=FALSE
)
controller$terminate()
# create new data
new_dat <- tibble::tribble(
~species, ~sex,
"Chinstrap", "male"
)
# create prediction for each of the models
library(purrr)
library(tibble)
preds <- tibble(mass = map_dbl(res$result, predict, new_dat))
# plot the result
library(ggplot2)
ggplot(preds, aes(x = mass)) +
geom_histogram(bins=samples/50) +
ggtitle("Ensemble model prediction of mass of male Chinstrap penguins")
